## Copyright Broad Institute, 2017
##
## This WDL workflow runs GATK4 Mutect 2 on a single tumor-normal pair or on a single tumor sample,
## and performs additional filtering and functional annotation tasks.
##
## NOTE: this wdl is an exact copy of mutect2.wdl in the gatk repo except for replacing File with String in GATK task inputs in order to
## avoid localizing files in cromwell and thereby allowing the GATK engine to access cloud-based files with NIO.  Once
## cromwell supports "smart" File variables that know when and when not to localize the two wdls should be merged.
##
## Main requirements/expectations :
## - One analysis-ready BAM file (and its index) for each sample
##
## Description of inputs:
##
## ** Runtime ** 
## gatk_docker, oncotator_docker: docker images to use for GATK 4 Mutect2 and for Oncotator
## preemptible_attempts: how many preemptions to tolerate before switching to a non-preemptible machine (on Google)
## max_retries: how many times to retry failed tasks -- very important on the cloud when there are transient errors
## gatk_override: (optional) local file or Google bucket path to a GATK 4 java jar file to be used instead of the GATK 4 jar
##                in the docker image.  This must be supplied when running in an environment that does not support docker
##                (e.g. SGE cluster on a Broad on-prem VM)
##
## ** Workflow options **
## intervals: genomic intervals (will be used for scatter)
## scatter_count: number of parallel jobs to generate when scattering over intervals
## artifact_modes: types of artifacts to consider in the orientation bias filter (optional)
## m2_extra_args, m2_extra_filtering_args: additional arguments for Mutect2 calling and filtering (optional)
## split_intervals_extra_args: additional arguments for splitting intervals before scattering (optional)
## run_orientation_bias_filter: (optional) if true, run the orientation bias filter, which is the GATK implementation of
##         D-ToxoG with modifications to allow multiple artifact modes.
##         For more information on D-ToxoG, see https://software.broadinstitute.org/cancer/cga/dtoxog
## run_orientation_bias_mixture_model_filter: (optional) if true, filter orientation bias sites with the read orientation artifact mixture model.
##         This is the recommended orientation bias filter, particularly for data sequenced on Illumina NovaSeq.
##         If set to true, artifact_mode will be ignored, as the model learns the artifact modes on its own.
##         While we offer both options, there's no need to run both the mixture model filter and the one based on D-ToxoG.
## run_oncotator: if true, annotate the M2 VCFs using oncotator (to produce a TCGA MAF).  Important:  This requires a
##                   docker image and should  not be run in environments where docker is unavailable (e.g. SGE cluster on
##                   a Broad on-prem VM).  Access to docker hub is also required, since the task downloads a public docker image.
##                   (optional, false by default)
##
## ** Primary inputs **
## ref_fasta, ref_fai, ref_dict: reference genome, index, and dictionary
## tumor_bam, tumor_bam_index: BAM and index for the tumor sample
## normal_bam, normal_bam_index: BAM and index for the normal sample
##
## ** Primary resources ** (optional but strongly recommended)
## pon: optional panel of normals in VCF format containing probable technical artifacts (false positves)
## gnomad: optional database of known germline variants (see http://gnomad.broadinstitute.org/downloads)
## variants_for_contamination: VCF of common variants with allele frequencies for calculating contamination
##
## ** Secondary resources ** (for optional tasks)
## onco_ds_tar_gz, default_config_file: Oncotator datasources and config file
## sequencing_center, sequence_source: metadata for Oncotator
## filter_oncotator_maf: Whether the MAF generated by oncotator should have the filtered variants removed. Default: true
## realignment_index_bundle: resource for FilterAlignmentArtifacts, which runs if and only if it is specified.  Generated by BwaMemIndexImageCreator.
##
## Funcotator parameters (see Funcotator help for more details).
## funco_reference_version: "hg19" for hg19 or b37.  "hg38" for hg38.  Default: "hg19"
## funco_transcript_selection_list: Transcripts (one GENCODE ID per line) to give priority during selection process.
## funco_transcript_selection_mode: How to select transcripts in Funcotator.  ALL, CANONICAL, or BEST_EFFECT
## funco_data_sources_tar_gz:  Funcotator datasources tar gz file.  Bucket location is recommended when running on the cloud.
## funco_annotation_defaults:  Default values for annotations, when values are unspecified.  Specified as  <ANNOTATION>:<VALUE>.  For example:  "Center:Broad"
## funco_annotation_overrides:  Values for annotations, even when values are unspecified.  Specified as  <ANNOTATION>:<VALUE>.  For example:  "Center:Broad"
## funcotator_excluded_fields:  Annotations that should not appear in the output (VCF or MAF).  Specified as  <ANNOTATION>.  For example:  "ClinVar_ALLELEID"
##
## Outputs :
## - One VCF file and its index with primary filtering applied; secondary filtering and functional annotation if requested; a bamout.bam
##   file of reassembled reads if requested
##
## Cromwell version support
## - Successfully tested on v34
##
## LICENSING :
## This script is released under the WDL source code license (BSD-3) (see LICENSE in
## https://github.com/broadinstitute/wdl). Note however that the programs it calls may
## be subject to different licenses. Users are responsible for checking that they are
## authorized to run all programs before running this script. Please see the docker
## pages at https://hub.docker.com/r/broadinstitute/* for detailed licensing information
## pertaining to the included programs.

workflow Mutect2 {
    # Mutect2 inputs
    File? intervals
    File ref_fasta
    File ref_fai
    File ref_dict
    File tumor_bam
    File tumor_bai
    File? normal_bam
    File? normal_bai
    File? pon
    Int scatter_count
    File? gnomad
    File? variants_for_contamination
    File? realignment_index_bundle
    String? realignment_extra_args
    Boolean? run_orientation_bias_filter
    Array[String]? artifact_modes
    Boolean run_ob_filter = select_first([run_orientation_bias_filter, true]) && (length(select_first([artifact_modes, ["G/T", "C/T"]])) > 0)
    File? tumor_sequencing_artifact_metrics
    String? m2_extra_args
    String? m2_extra_filtering_args
    String? split_intervals_extra_args
    Boolean? make_bamout
    Boolean make_bamout_or_default = select_first([make_bamout, false])
    Boolean? compress_vcfs
    Boolean compress = select_first([compress_vcfs, false])
    File? gga_vcf

    # oncotator inputs
    Boolean? run_oncotator
    Boolean run_oncotator_or_default = select_first([run_oncotator, false])
    File? onco_ds_tar_gz
    String? onco_ds_local_db_dir
    String? sequencing_center
    String? sequence_source
    File? default_config_file

    # funcotator inputs
    Boolean? run_funcotator
    Boolean run_funcotator_or_default = select_first([run_funcotator, false])
    String? funco_reference_version
    File? funco_data_sources_tar_gz
    String? funco_transcript_selection_mode
    File? funco_transcript_selection_list
    Array[String]? funco_annotation_defaults
    Array[String]? funco_annotation_overrides

    # runtime
    Boolean? filter_oncotator_maf
    Boolean filter_oncotator_maf_or_default = select_first([filter_oncotator_maf, true])
    Boolean? filter_funcotations
    Boolean filter_funcotations_or_default = select_first([filter_funcotations, true])
    String? oncotator_extra_args
    String? funcotator_extra_args

    # logic about output file names -- these are the names *without* .vcf extensions
    String output_basename = basename(tumor_bam, ".bam")
    String unfiltered_name = output_basename + "-unfiltered"
    String filtered_name = output_basename + "-filtered"
    String funcotated_name = output_basename + "-funcotated"

    String output_vcf_name = basename(tumor_bam, ".bam") + ".vcf"

    call SplitIntervals {
        input:
            intervals = intervals,
            ref_fasta = ref_fasta,
            ref_fai = ref_fai,
            ref_dict = ref_dict,
            scatter_count = scatter_count,
            split_intervals_extra_args = split_intervals_extra_args
    }

    scatter (subintervals in SplitIntervals.interval_files ) {
        call M2 {
            input:
                intervals = subintervals,
                ref_fasta = ref_fasta,
                tumor_bam = tumor_bam,
                normal_bam = normal_bam,
                pon = pon,
                gnomad = gnomad,
                m2_extra_args = m2_extra_args,
                make_bamout = make_bamout_or_default,
                compress = compress,
                gga_vcf = gga_vcf
        }
    }

    call MergeVCFs {
        input:
            input_vcfs = M2.unfiltered_vcf,
            input_vcf_indices = M2.unfiltered_vcf_index,
            output_name = unfiltered_name,
            compress = compress
    }

    if (make_bamout_or_default) {
        call MergeBamOuts {
            input:
                ref_fasta = ref_fasta,
                ref_fai = ref_fai,
                ref_dict = ref_dict,
                bam_outs = M2.output_bamOut,
                output_vcf_name = basename(MergeVCFs.merged_vcf, ".vcf")
        }
    }

    if (run_ob_filter && !defined(tumor_sequencing_artifact_metrics)) {
        call CollectSequencingArtifactMetrics {
            input:
                ref_fasta = ref_fasta,
                ref_fai = ref_fai,
                tumor_bam = tumor_bam,
                tumor_bai = tumor_bai
        }
    }

    if (defined(variants_for_contamination)) {
        call CalculateContamination {
            input:
                intervals = intervals,
                ref_fasta = ref_fasta,
                tumor_bam = tumor_bam,
                normal_bam = normal_bam,
                variants_for_contamination = variants_for_contamination
        }
    }

    call Filter {
        input:
            intervals = intervals,
            unfiltered_vcf = MergeVCFs.merged_vcf,
            output_name = filtered_name,
            compress = compress,
            contamination_table = CalculateContamination.contamination_table,
            maf_segments = CalculateContamination.maf_segments,
            m2_extra_filtering_args = m2_extra_filtering_args
    }

    if (run_ob_filter) {
        # Get the metrics either from the workflow input or CollectSequencingArtifactMetrics if no workflow input is provided
        File input_artifact_metrics = select_first([tumor_sequencing_artifact_metrics, CollectSequencingArtifactMetrics.pre_adapter_metrics])

        call FilterByOrientationBias {
            input:
                input_vcf = Filter.filtered_vcf,
                output_name = filtered_name,
                compress = compress,
                pre_adapter_metrics = input_artifact_metrics,
                artifact_modes = artifact_modes
        }
    }

    if (defined(realignment_index_bundle)) {
        File realignment_filter_input = select_first([FilterByOrientationBias.filtered_vcf, Filter.filtered_vcf])
        call FilterAlignmentArtifacts {
            input:
                bam = tumor_bam,
                realignment_index_bundle = select_first([realignment_index_bundle]),
                realignment_extra_args = realignment_extra_args,
                compress = compress,
                output_name = filtered_name,
                input_vcf = realignment_filter_input
        }
    }

    if (run_oncotator_or_default) {
        File oncotate_vcf_input = select_first([FilterAlignmentArtifacts.filtered_vcf, FilterByOrientationBias.filtered_vcf, Filter.filtered_vcf])
        call oncotate_m2 {
            input:
                m2_vcf = oncotate_vcf_input,
                onco_ds_tar_gz = onco_ds_tar_gz,
                onco_ds_local_db_dir = onco_ds_local_db_dir,
                sequencing_center = sequencing_center,
                sequence_source = sequence_source,
                default_config_file = default_config_file,
                case_id = M2.tumor_sample[0],
                control_id = M2.normal_sample[0],
                filter_maf = filter_oncotator_maf_or_default,
                oncotator_extra_args = oncotator_extra_args
        }
    }

    if (run_funcotator_or_default) {
        File funcotate_vcf_input = select_first([FilterAlignmentArtifacts.filtered_vcf, FilterByOrientationBias.filtered_vcf, Filter.filtered_vcf])
        File funcotate_vcf_input_index = select_first([FilterAlignmentArtifacts.filtered_vcf_index, FilterByOrientationBias.filtered_vcf_index, Filter.filtered_vcf_index])
        call FuncotateMaf {
            input:
                input_vcf = funcotate_vcf_input,
                input_vcf_idx = funcotate_vcf_input_index,
                ref_fasta = ref_fasta,
                reference_version = select_first([funco_reference_version, "hg19"]),
                data_sources_tar_gz = funco_data_sources_tar_gz,
                case_id = M2.tumor_sample[0],
                control_id = M2.normal_sample[0],
                transcript_selection_mode = funco_transcript_selection_mode,
                transcript_selection_list = funco_transcript_selection_list,
                annotation_defaults = funco_annotation_defaults,
                annotation_overrides = funco_annotation_overrides,
                filter_funcotations = filter_funcotations_or_default,
                sequencing_center = sequencing_center,
                sequence_source = sequence_source,
                extra_args = funcotator_extra_args
        }
    }

    output {
        File filtered_vcf = select_first([FilterAlignmentArtifacts.filtered_vcf, FilterByOrientationBias.filtered_vcf, Filter.filtered_vcf])
        File filtered_vcf_index = select_first([FilterAlignmentArtifacts.filtered_vcf_index, FilterByOrientationBias.filtered_vcf_index, Filter.filtered_vcf_index])
        File? contamination_table = CalculateContamination.contamination_table

        File? oncotated_m2_maf = oncotate_m2.oncotated_m2_maf
        File? funcotated_maf = FuncotateMaf.funcotated_output
        File? preadapter_detail_metrics = CollectSequencingArtifactMetrics.pre_adapter_metrics
        File? bamout = MergeBamOuts.merged_bam_out
        File? bamout_index = MergeBamOuts.merged_bam_out_index
        File? maf_segments = CalculateContamination.maf_segments
    }
}

task SplitIntervals {
    # inputs
    File? intervals
    File ref_fasta
    File ref_fai
    File ref_dict
    Int scatter_count
    String? split_intervals_extra_args

    # runtime
    Int? mem

    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 3500
    Int command_mem = machine_mem - 500

    command {
        set -e
        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        mkdir interval-files
        /gatk/gatk --java-options "-Xmx${command_mem}m" SplitIntervals \
            -R ${ref_fasta} \
            ${"-L " + intervals} \
            -scatter ${scatter_count} \
            -O interval-files \
            ${split_intervals_extra_args}
        cp interval-files/*.intervals .
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }
    output {
        Array[File] interval_files = glob("*.intervals")
    }
}

task M2 {
    # inputs
    String? intervals
    String ref_fasta
    String tumor_bam
    String? normal_bam
    String? pon
    String? gnomad
    String? m2_extra_args
    Boolean? make_bamout
    Boolean compress
    String? gga_vcf
    String? gga_vcf_idx

    String output_vcf = "output" + if compress then ".vcf.gz" else ".vcf"
    String output_vcf_index = output_vcf + if compress then ".tbi" else ".idx"

    # runtime
    Int? mem


    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 3500
    Int command_mem = machine_mem - 500


    command <<<
        set -e

        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        # We need to create these files regardless, even if they stay empty
        touch bamout.bam
        echo "" > normal_name.txt

        /gatk/gatk --java-options "-Xmx${command_mem}m" GetSampleName -R ${ref_fasta} -I ${tumor_bam} -O tumor_name.txt -encode
        tumor_command_line="-I ${tumor_bam} -tumor `cat tumor_name.txt`"

        if [[ ! -z "${normal_bam}" ]]; then
            /gatk/gatk --java-options "-Xmx${command_mem}m" GetSampleName -R ${ref_fasta} -I ${normal_bam} -O normal_name.txt -encode
            normal_command_line="-I ${normal_bam} -normal `cat normal_name.txt`"
        fi

        /gatk/gatk --java-options "-Xmx${command_mem}m" Mutect2 \
            -R ${ref_fasta} \
            $tumor_command_line \
            $normal_command_line \
            ${"--germline-resource " + gnomad} \
            ${"-pon " + pon} \
            ${"-L " + intervals} \
            ${"--genotyping-mode GENOTYPE_GIVEN_ALLELES --alleles " + gga_vcf} \
            -O "${output_vcf}" \
            ${true='--bam-output bamout.bam' false='' make_bamout} \
            ${m2_extra_args}
    >>>

    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File unfiltered_vcf = "${output_vcf}"
        File unfiltered_vcf_index = "${output_vcf_index}"
        File output_bamOut = "bamout.bam"
        String tumor_sample = read_string("tumor_name.txt")
        String normal_sample = read_string("normal_name.txt")
    }
}

task MergeVCFs {
    # inputs
    Array[File] input_vcfs
    Array[File] input_vcf_indices
    String output_name
    Boolean compress
    String output_vcf = output_name + if compress then ".vcf.gz" else ".vcf"
    String output_vcf_index = output_vcf + if compress then ".tbi" else ".idx"

    # runtime
    Int? mem

    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 3500
    Int command_mem = machine_mem - 1000

    # using MergeVcfs instead of GatherVcfs so we can create indices
    # WARNING 2015-10-28 15:01:48 GatherVcfs  Index creation not currently supported when gathering block compressed VCFs.
    command {
        set -e
        export GATK_LOCAL_JAR="/gatk/gatk.jar"
        /gatk/gatk --java-options "-Xmx${command_mem}m" MergeVcfs -I ${sep=' -I ' input_vcfs} -O ${output_vcf}
    }

    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File merged_vcf = "${output_vcf}"
        File merged_vcf_index = "${output_vcf_index}"
    }
}

task MergeBamOuts {
    # inputs
    File ref_fasta
    File ref_fai
    File ref_dict
    Array[File]+ bam_outs
    String output_vcf_name

    # runtime
    Int? mem


    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 7000
    Int command_mem = machine_mem - 1000

    command <<<
        # This command block assumes that there is at least one file in bam_outs.
        #  Do not call this task if len(bam_outs) == 0
        set -e
        export GATK_LOCAL_JAR="/gatk/gatk.jar"
        /gatk/gatk --java-options "-Xmx${command_mem}m" GatherBamFiles \
            -I ${sep=" -I " bam_outs} -O unsorted.out.bam -R ${ref_fasta}

        # We must sort because adjacent scatters may have overlapping (padded) assembly regions, hence
        # overlapping bamouts

        /gatk/gatk --java-options "-Xmx${command_mem}m" SortSam -I unsorted.out.bam \
            -O ${output_vcf_name}.out.bam \
            --SORT_ORDER coordinate -VALIDATION_STRINGENCY LENIENT
        /gatk/gatk --java-options "-Xmx${command_mem}m" BuildBamIndex -I ${output_vcf_name}.out.bam -VALIDATION_STRINGENCY LENIENT
    >>>
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File merged_bam_out = "${output_vcf_name}.out.bam"
        File merged_bam_out_index = "${output_vcf_name}.out.bai"
    }
}

task CollectSequencingArtifactMetrics {
    # inputs
    File ref_fasta
    File ref_fai
    File tumor_bam
    File tumor_bai

    # runtime
    Int? mem

    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 7000
    Int command_mem = machine_mem - 1000

    command {
        set -e
        export GATK_LOCAL_JAR="/gatk/gatk.jar"
        /gatk/gatk --java-options "-Xmx${command_mem}m" CollectSequencingArtifactMetrics \
            -I ${tumor_bam} -O "gatk" -R ${ref_fasta} -VALIDATION_STRINGENCY LENIENT
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File pre_adapter_metrics = "gatk.pre_adapter_detail_metrics"
    }
}

task CalculateContamination {
    # inputs
    String? intervals
    String ref_fasta
    String tumor_bam
    String? normal_bam
    String? variants_for_contamination

    # runtime
    Int? mem

    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 3000
    Int command_mem = machine_mem - 500

    command {
        set -e

        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        if [[ -f "${normal_bam}" ]]; then
            /gatk/gatk --java-options "-Xmx${command_mem}m" GetPileupSummaries -I ${normal_bam} ${"--interval-set-rule INTERSECTION -L " + intervals} \
                -V ${variants_for_contamination} -L ${variants_for_contamination} -O normal_pileups.table
            NORMAL_CMD="-matched normal_pileups.table"
        fi

        /gatk/gatk --java-options "-Xmx${command_mem}m" GetPileupSummaries -R ${ref_fasta} -I ${tumor_bam} ${"--interval-set-rule INTERSECTION -L " + intervals} \
            -V ${variants_for_contamination} -L ${variants_for_contamination} -O pileups.table
        /gatk/gatk --java-options "-Xmx${command_mem}m" CalculateContamination -I pileups.table -O contamination.table --tumor-segmentation segments.table $NORMAL_CMD
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File pileups = "pileups.table"
        File contamination_table = "contamination.table"
        File maf_segments = "segments.table"
    }
}

task Filter {
    # inputs
    String? intervals
    String unfiltered_vcf
    String output_name
    Boolean compress
    String output_vcf = output_name + if compress then ".vcf.gz" else ".vcf"
    String output_vcf_index = output_vcf + if compress then ".tbi" else ".idx"
    File? contamination_table
    File? maf_segments
    String? m2_extra_filtering_args

    # runtime
    Int? mem

    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 7000
    Int command_mem = machine_mem - 500

    command {
        set -e

        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        /gatk/gatk --java-options "-Xmx${command_mem}m" FilterMutectCalls -V ${unfiltered_vcf} \
      	    -O ${output_vcf} \
      	    ${"--contamination-table " + contamination_table} \
      	    ${"--tumor-segmentation " + maf_segments} \
      	    ${m2_extra_filtering_args}
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File filtered_vcf = "${output_vcf}"
        File filtered_vcf_index = "${output_vcf_index}"
    }
}

task FilterByOrientationBias {
    # input
    String input_vcf
    String output_name
    Boolean compress
    String output_vcf = output_name + if compress then ".vcf.gz" else ".vcf"
    String output_vcf_index = output_vcf +  if compress then ".tbi" else ".idx"
    File pre_adapter_metrics
    Array[String]? artifact_modes

    # If artifact modes is passed in to the task as [], this task will fail.
    Array[String] final_artifact_modes = select_first([artifact_modes, ["G/T", "C/T"]])

    # runtime
    Int? mem


    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 7000
    Int command_mem = machine_mem - 500

    command {
        set -e

        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        /gatk/gatk --java-options "-Xmx${command_mem}m" FilterByOrientationBias \
            -V ${input_vcf} \
            -AM ${sep=" -AM " final_artifact_modes} \
            -P ${pre_adapter_metrics} \
            -O ${output_vcf}
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }

    output {
        File filtered_vcf = "${output_vcf}"
        File filtered_vcf_index = "${output_vcf_index}"
    }
}

task FilterAlignmentArtifacts {
    #input
    String input_vcf
    String bam
    String output_name
    Boolean compress
    String output_vcf = output_name + if compress then ".vcf.gz" else ".vcf"
    String output_vcf_index = output_vcf +  if compress then ".tbi" else ".idx"
    File realignment_index_bundle
    String? realignment_extra_args

    # runtime
    Int? mem


    # Mem is in units of GB but our command and memory runtime values are in MB
    Int machine_mem = if defined(mem) then mem * 1000 else 9000
    Int command_mem = machine_mem - 500

    command {
        set -e

        export GATK_LOCAL_JAR="/gatk/gatk.jar"

        /gatk/gatk --java-options "-Xmx${command_mem}m" FilterAlignmentArtifacts \
            -V ${input_vcf} \
            -I ${bam} \
            --bwa-mem-index-image ${realignment_index_bundle} \
            ${realignment_extra_args} \
            -O ${output_vcf}
    }
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }
    output {
        File filtered_vcf = "${output_vcf}"
        File filtered_vcf_index = "${output_vcf_index}"
    }
}

task oncotate_m2 {
    # inputs
    File m2_vcf
    File? onco_ds_tar_gz
    String? onco_ds_local_db_dir
    String? oncotator_exe
    String? sequencing_center
    String? sequence_source
    File? default_config_file
    String case_id
    String? control_id
    String? oncotator_extra_args

    Boolean? filter_maf
    Boolean is_filter_maf = select_first([filter_maf, true])
    String filter_maf_args = if (is_filter_maf) then " --collapse-filter-cols --prune-filter-cols " else ""

    command <<<
        # fail if *any* command below (not just the last) doesn't return 0, in particular if wget fails
        set -e

        # local db dir is a directory and has been specified
        if [[ -d "${onco_ds_local_db_dir}" ]]; then
            echo "Using local db-dir: ${onco_ds_local_db_dir}"
            echo "THIS ONLY WORKS WITHOUT DOCKER!"
            ln -s ${onco_ds_local_db_dir} onco_dbdir
        elif [[ "${onco_ds_tar_gz}" == *.tar.gz ]]; then
            echo "Using given tar file: ${onco_ds_tar_gz}"
            mkdir onco_dbdir
            tar zxvf ${onco_ds_tar_gz} -C onco_dbdir --strip-components 1
        else
            echo "Downloading and installing oncotator datasources from Broad FTP site..."
            # Download and untar the db-dir
            wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/oncotator/oncotator_v1_ds_April052016.tar.gz
            tar zxvf oncotator_v1_ds_April052016.tar.gz
            ln -s oncotator_v1_ds_April052016 onco_dbdir
        fi

        ${default="/root/oncotator_venv/bin/oncotator" oncotator_exe} --db-dir onco_dbdir/ -c $HOME/tx_exact_uniprot_matches.AKT1_CRLF2_FGFR1.txt  \
            -v ${m2_vcf} ${case_id}.maf.annotated hg19 -i VCF -o TCGAMAF --skip-no-alt --collapse-number-annotations --log_name oncotator.log \
            -a Center:${default="Unknown" sequencing_center} \
            -a source:${default="Unknown" sequence_source} \
            -a normal_barcode:${control_id} \
            -a tumor_barcode:${case_id} \
            ${"--default_config " + default_config_file} \
            ${filter_maf_args} \
            ${oncotator_extra_args}
    >>>

    runtime {
        docker: "ngs/oncotator:1.9.9.0"
    }

    output {
        File oncotated_m2_maf="${case_id}.maf.annotated"
    }
}

task FuncotateMaf {
     # inputs
     String ref_fasta
     String input_vcf
     String input_vcf_idx
     String reference_version
     String? sequencing_center
     String? sequence_source
     String case_id
     String? control_id

     File? data_sources_tar_gz
     String? transcript_selection_mode
     File? transcript_selection_list
     Array[String]? annotation_defaults
     Array[String]? annotation_overrides
     Boolean filter_funcotations
     File? interval_list

     String? extra_args

     # ==============
     # Process input args:
     String annotation_def_arg = if defined(annotation_defaults) then " --annotation-default " else ""
     String annotation_over_arg = if defined(annotation_overrides) then " --annotation-override " else ""
     String filter_funcotations_args = if (filter_funcotations) then " --remove-filtered-variants " else ""
     String final_output_filename = basename(input_vcf, ".vcf") + ".maf.annotated"
     # ==============

     # runtime
     Int? mem

     # This should be updated when a new version of the data sources is released
     String default_datasources_version = "funcotator_dataSources.v1.4.20180615"

     # You may have to change the following two parameter values depending on the task requirements
     Int default_ram_mb = 3000

     # Mem is in units of GB but our command and memory runtime values are in MB
     Int machine_mem = if defined(mem) then mem *1000 else default_ram_mb
     Int command_mem = machine_mem - 1000

     command <<<
         set -e
         export GATK_LOCAL_JAR="/gatk/gatk.jar"

         DATA_SOURCES_TAR_GZ=${data_sources_tar_gz}
         if [[ ! -e $DATA_SOURCES_TAR_GZ ]] ; then
             # We have to download the data sources:
             echo "Data sources gzip does not exist: $DATA_SOURCES_TAR_GZ"
             echo "Downloading default data sources..."
             wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/funcotator/${default_datasources_version}.tar.gz
             tar -zxf ${default_datasources_version}.tar.gz
             DATA_SOURCES_FOLDER=${default_datasources_version}
         else
             # Extract the tar.gz:
             mkdir datasources_dir
             tar zxvf ${data_sources_tar_gz} -C datasources_dir --strip-components 1
             DATA_SOURCES_FOLDER="$PWD/datasources_dir"
         fi

         /gatk/gatk --java-options "-Xmx${command_mem}m" Funcotator \
             --data-sources-path $DATA_SOURCES_FOLDER \
             --ref-version ${reference_version} \
             --output-file-format "MAF" \
             -R ${ref_fasta} \
             -V ${input_vcf} \
             -O ${final_output_filename} \
             ${"-L " + interval_list} \
             ${"--transcript-selection-mode " + transcript_selection_mode} \
             ${"--transcript-list " + transcript_selection_list} \
            --annotation-default normal_barcode:${control_id} \
            --annotation-default tumor_barcode:${case_id} \
            --annotation-default Center:${default="Unknown" sequencing_center} \
            --annotation-default source:${default="Unknown" sequence_source} \
             ${annotation_def_arg}${default="" sep=" --annotation-default " annotation_defaults} \
             ${annotation_over_arg}${default="" sep=" --annotation-override " annotation_overrides} \
             ${filter_funcotations_args} \
             ${extra_args}
     >>>
    runtime {
        docker: "ngs/gatk:4.0.6.0"
    }
     output {
         File funcotated_output = "${final_output_filename}"
     }
 }